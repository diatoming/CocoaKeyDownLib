//
//  NSEventModifierFlags+UnpackingExtension.swift
//  ModifierMate
//
//  Created by Paul Patterson on 24/01/2015.
//  Copyright (c) 2015 paulpatterson. All rights reserved.
//

import Foundation
import Cocoa

// MARK: Raw values of common NSEventModifierFlags

let rAlphaShiftKeyMask     = NSEventModifierFlags.AlphaShiftKeyMask.rawValue  // 2(16)
let rShiftKeyMask          = NSEventModifierFlags.ShiftKeyMask.rawValue       // 2(17)
let rControlKeyMask        = NSEventModifierFlags.ControlKeyMask.rawValue     // 2(18)
let rAlternateKeyMask      = NSEventModifierFlags.AlternateKeyMask.rawValue   // 2(19)
let rCommandKeyMask        = NSEventModifierFlags.CommandKeyMask.rawValue     // 2(20)
let rNumericPadKeyMask     = NSEventModifierFlags.NumericPadKeyMask.rawValue  // 2(21)
let rHelpKeyMask           = NSEventModifierFlags.HelpKeyMask.rawValue        // 2(22)
let rFunctionKeyMask       = NSEventModifierFlags.FunctionKeyMask.rawValue    // 2(23)
let rDeviceIndependentMask = NSEventModifierFlags.DeviceIndependentModifierFlagsMask.rawValue

// MARK: Extending NSEventModifierFlags

extension NSEventModifierFlags {
    
    /// Masks off the device-dependent modifier flags from the modifierFlags variable,
    /// returning the raw value of the remaining device-independent flags.
    var rScreenedFlags: UInt {
        return rawValue & rDeviceIndependentMask
    }
    
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the AlphaShiftKey mask is among the device-independent flags present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the Caps Lock is on.
    var containsAlphaShiftKey: Bool {
        return (rScreenedFlags & rAlphaShiftKeyMask) > 0
    }
    
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the AlternateKey mask is among the device-independent flags present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the Alt key is one of the modifier keys that the user has pressed.
    var containsAltKey: Bool {
        return (rScreenedFlags & rAlternateKeyMask) > 0
    }
    

    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the CommandKey mask is among the device-independent flags present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the Cmd key is one of the modifier keys that the user has pressed.
    var containsCmdKey: Bool {
        return (rScreenedFlags & rCommandKeyMask) > 0
    }
    

    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the ControlKey mask is among the device-independent flags present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the Ctrl key is one of the modifier keys that the user has pressed.
    var containsCtrlKey: Bool {
        return (rScreenedFlags & rControlKeyMask) > 0
    }
    

    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the ShiftKey mask is among the device-independent flags present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the Shift key is one of the modifier keys that the user has pressed.
    var containsShiftKey: Bool {
        return (rScreenedFlags & rShiftKeyMask) > 0
    }
    

    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the NumericPadKey mask is among the device-independent flags present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the user has pressed a key on the numeric pad.
    ///
    /// Note that the NumericPadKey mask will only ever be set on the extended Apple keyboard -
    /// Apple laptops do not have a numeric pad.
    var containsNumericPadKey: Bool {
        return rScreenedFlags & rNumericPadKeyMask > 0
    }
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the FunctionKey mask is the only device-independent flag present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the user has pressed one of the Function keys.
    ///
    /// Note that the NumericPadKey mask will only ever be set on the extended Apple keyboard -
    /// Apple laptops do not have a numeric pad.
    var containsFunctionKey: Bool {
        return rScreenedFlags & rFunctionKeyMask > 0
    }
    
    
    //////////////////////////////////////////
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the AlphaShiftKey mask is the only device-independent flag present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the caps-lock is on.
    var matchesAlphaShiftKey: Bool {
        return (rScreenedFlags == rAlphaShiftKeyMask)
    }
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the AlternateKey mask is the only device-independent flag present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the Alt key is the ONLY modifier key that the user has pressed.
    var matchesAltKey: Bool {
        return (rScreenedFlags == rAlternateKeyMask)
    }
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the CommandKey mask is the only device-independent flag present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the Cmd key is the ONLY modifier key that the user has pressed.
    var matchesCmdKey: Bool {
        return (rScreenedFlags == rCommandKeyMask)
    }
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the ControlKey mask is the only device-independent flag present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the Ctrl key is the ONLY modifier key that the user has pressed.
    var matchesCtrlKey: Bool {
        return (rScreenedFlags == rControlKeyMask)
    }
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the ShiftKey mask is the only device-independent flag present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that 
    /// the Shift key is the ONLY modifier key that the user has pressed.
    var matchesShiftKey: Bool {
        return (rScreenedFlags == rShiftKeyMask)
    }
    
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the NumericPadKey mask is the only device-independent flag present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that 
    /// the user has pressed a key on the numeric pad, and NO OTHER modifier.
    ///
    /// Note that the NumericPadKey mask will only ever be set on the extended Apple keyboard - 
    /// Apple laptops do not have a numeric pad.
    var matchesNumericPadKey: Bool {
        return (rScreenedFlags == rNumericPadKeyMask)
    }
    
    /// After masking off device-dependent modifier flags, this computed property returns <true> if
    /// the FunctionKey mask is the only device-independent flag present, otherwise it returns
    /// <false>.
    ///
    /// The value of this property is most commonly requested when interrogating the <modifierFlags>
    /// property of an event generated by a user key-press: a return value of <true> indicates that
    /// the user has pressed one of the Function keys, and NO OTHER modifier.
    var matchesFunctionKey: Bool {
        return (rScreenedFlags == rFunctionKeyMask)
    }

    
    /// Returns <true> if the value of the device-independent portion of this NSEventModifierFlags 
    /// instance matches the value of the NSEventModifierFlags instance passed in as the only argument, 
    /// otherwise returns <false>.
    ///
    /// This function is mostly commonly used when interrogating the <modifierFlags> property of an 
    /// event generated by a user key-press.
    ///
    /// :param: combination - an NSEventModifierFlags instance, created by OR'ing together individual NSEventModifierFlags options. For example, to check for the presence of the Cmd key and the Alt key (AND NO OTHER MODIFIER), pass in '.CommandKeyMask | .ShiftKeyMask'
    /// :returns: Bool
    func matchesCombination(combination: NSEventModifierFlags) -> Bool {
        return rScreenedFlags == combination.rawValue
    }
    
    /// Returns <true> if the value of the device-independent portion of this NSEventModifierFlags 
    /// instance contains the flags present in the NSEventModifierFlags instance passed in as the only 
    /// argument, otherwise returns <false>.
    ///
    /// This function is mostly commonly used when interrogating the <modifierFlags> property of an event
    /// generated by a user key-press.
    ///
    /// :param: combination - an NSEventModifierFlags instance, created by OR'ing together individual NSEventModifierFlags options. For example to check for the presence of the CommandKey mask and the AlternateKey mask, pass in '.CommandKeyMask | .AlternateKeyMask'
    /// :returns: Bool
    func containsCombination(combination: NSEventModifierFlags) -> Bool {
        return (rScreenedFlags & combination.rawValue) == combination.rawValue
    }
}
